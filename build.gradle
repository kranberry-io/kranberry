// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    apply from: rootProject.file("versions.gradle")
    apply from: "${rootProject.projectDir}/tools/lib-version.gradle"

    repositories {
        google()
        jcenter()
        mavenCentral()
        maven {
            url = uri("local-plugin-repository")
        }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$androidToolsGradleVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$navigation_version"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"
        // uncomment to test kranberry tests
//        classpath "io.github.kranberry-io:runtests:$PUBLISH_VERSION"
    }
}

plugins {
    id("io.github.gradle-nexus.publish-plugin") version "$nexus_publish_version"
    id("org.jetbrains.dokka") version "$dokka_version"
}
apply from: "${rootProject.projectDir}/tools/publish/publish-root.gradle"

allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url = uri("local-plugin-repository")
        }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: rootProject.file("versions.gradle")
apply plugin: "io.gitlab.arturbosch.detekt"
// uncomment to test kranberry tests
//apply plugin: "io.github.kranberry-io.runtests"
apply from: "${rootProject.projectDir}/tools/publish/publish-module.gradle"

// uncomment to test kranberry tests
//kranberryTests {
//    packageName = "io.kranberry"
//    packageTests = "io.kranberry.wrapper.test"
//    androidTestApkOutputPath = "build/outputs/apk/androidTest/release/kranberry-release-androidTest.apk"
//    testsRunner = "androidx.test.runner.AndroidJUnitRunner"
//}

android {
    testBuildType "release"

    compileSdkVersion project.compileApiVersion

    defaultConfig {
        minSdkVersion minApiVersion
        targetSdkVersion targetApiVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            debuggable true
            getIsDefault().set(true)
            matchingFallbacks = ['debug']
            signingConfig signingConfigs.debug
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    // filter buildType debug
    variantFilter { variant ->
        def buildType = variant.buildType.name
        if (buildType == "debug") {
            setIgnore(true)
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.test.ext:junit:$androidXJunitVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinTestVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinTestVersion"

    api "androidx.test.espresso:espresso-core:$espressoCoreVersion"
    api "androidx.test.ext:junit:$androidXJunitVersion"
    api "androidx.test.uiautomator:uiautomator:$uiAutomatorVersion"
    api "com.google.code.gson:gson:$gsonVersion"

    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detekt_version"
}

detekt {
    buildUponDefaultConfig = true
    config = files("tools/detekt/detekt-config.yml")

    reports {
        html.enabled = true
        xml.enabled = true
        txt.enabled = true
        sarif.enabled = true
    }
}

tasks.detekt.jvmTarget = "1.8"